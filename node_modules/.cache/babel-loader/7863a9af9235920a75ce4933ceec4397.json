{"ast":null,"code":"var numArray = [3, 56, 2, 48, 5]; // Notice that in order for this to work, you dont put the Math.pow section\n// inside the curly braces just like in a normal function.\n// Otherwise it gives error.\n// ================================================\n// map function\n// ================================================\n\nvar squareRootArray = numArray.map(function (eachNum) {\n  return Math.pow(eachNum, 0.5);\n});\nconsole.log(squareRootArray); // Output: Array(5) [ 1.7320508075688772, 7.483314773547883, 1.4142135623730951, 6.928203230275509, 2.23606797749979 ]\n// ================================================\n// reduce function\n// ================================================\n\nvar concatenateNum = numArray.reduce(function (previousNum, currentNum) {\n  return previousNum.toString() + currentNum.toString();\n});\nconsole.log(concatenateNum); // Output: 3562485\n//Filter - Create a new array by keeping the items that return true.\n//Reduce - Accumulate a value by doing something to each item in an array.\n//Find - find the first item that matches from an array.\n//FindIndex - find the index of the first item that matches.","map":{"version":3,"sources":["/home/gingerbreadcookies/Desktop/020_reactjs-and-javascript-map-filter-reduce-find-findindex-functions/src/index.js"],"names":["numArray","squareRootArray","map","eachNum","Math","pow","console","log","concatenateNum","reduce","previousNum","currentNum","toString"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,EAAX,EAAe,CAAf,CAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,eAAe,GAAGD,QAAQ,CAACE,GAAT,CAAa,UAAAC,OAAO;AAAA,SAAIC,IAAI,CAACC,GAAL,CAASF,OAAT,EAAkB,GAAlB,CAAJ;AAAA,CAApB,CAAxB;AAEAG,OAAO,CAACC,GAAR,CAAYN,eAAZ,E,CACA;AAEA;AACA;AACA;;AAEA,IAAMO,cAAc,GAAGR,QAAQ,CAACS,MAAT,CAAgB,UAACC,WAAD,EAAcC,UAAd;AAAA,SAA6BD,WAAW,CAACE,QAAZ,KAAyBD,UAAU,CAACC,QAAX,EAAtD;AAAA,CAAhB,CAAvB;AAEAN,OAAO,CAACC,GAAR,CAAYC,cAAZ,E,CACA;AAEA;AAEA;AAEA;AAEA","sourcesContent":["let numArray = [3, 56, 2, 48, 5];\n\n// Notice that in order for this to work, you dont put the Math.pow section\n// inside the curly braces just like in a normal function.\n// Otherwise it gives error.\n// ================================================\n// map function\n// ================================================\nconst squareRootArray = numArray.map(eachNum => Math.pow(eachNum, 0.5));\n\nconsole.log(squareRootArray);\n// Output: Array(5) [ 1.7320508075688772, 7.483314773547883, 1.4142135623730951, 6.928203230275509, 2.23606797749979 ]\n\n// ================================================\n// reduce function\n// ================================================\n\nconst concatenateNum = numArray.reduce((previousNum, currentNum) => previousNum.toString() + currentNum.toString());\n\nconsole.log(concatenateNum);\n// Output: 3562485\n\n//Filter - Create a new array by keeping the items that return true.\n\n//Reduce - Accumulate a value by doing something to each item in an array.\n\n//Find - find the first item that matches from an array.\n\n//FindIndex - find the index of the first item that matches.\n"]},"metadata":{},"sourceType":"module"}